<h1>Settings</h1>

<div class="setting-item">
  <h3></h3>
  <h3>Log Type Management</h3>
    <div class="setting-item">
        <label for="new-log-type">Add New Log Type:</label>
        <div class="type-container">
            <input type="text" id="new-log-type" placeholder="e.g., 'Purchased', 'Bought', 'Banned'">
            <button id="add-log-type">Add Type</button>
        </div>
    </div>

    <div class="setting-item">
        <label>Current Log Types:</label>
        <ul id="log-type-list">
            <li>Loading...</li>
        </ul>
    </div>

    <h3>Roblox Studio Token:</h3>
    <div class="token-container">
        <input type="text" id="player-token" readonly placeholder="Generated token will appear here">
        <button id="generate-token">Generate New Token</button>
        <button id="copy-token">Copy</button>

        <label for="save-load-code" class="code-label">Save/Load Function Code:</label> 
        <pre id="save-load-code-display"><code class="language-lua"></code></pre>
    </div>
</div>
<script>
    const codeDisplay = document.querySelector('#save-load-code-display code');
    codeDisplay.textContent = `
------------------- AWS Settings --------------------

local API_URL = "http://127.0.0.1:8080/roblox-studio-api"
local token_id = "YOUR_TOKEN_ID" -- Change to your token

-----------------------------------------------------




local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local SaveLoadFunction = {}


-- [Example change_data Structure]

-- change_data = {
--	coins = 10,
--	test = 1
-- }

local function sentHttp(player, edit_type, change_data, type_name, message)
    local data = {
        token_id = token_id,
        change_data = change_data,
        edit_type = edit_type,
        type = type_name,
        user_id = player.UserId,
        message = message
    }

    local success, response = pcall(function()
        return HttpService:PostAsync(API_URL.."/dataEditor", HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
    end)
    if success then
        local data = HttpService:JSONDecode(response)
        if data.status == "success" then
            print("POST Success")
        else
            warn("Failed POST")
        end
    else
        warn("Failed POST")
    end
end

local function getHttp()
    local success, response = pcall(function()
        return HttpService:PostAsync(
            API_URL.."/getPlayerData",
            HttpService:JSONEncode({ token_id = token_id }),
            Enum.HttpContentType.ApplicationJson
        )
    end)
    if success then
        local data = HttpService:JSONDecode(response)
        if data.status == "success" then
            --print("Response from server:", data.data)
            return data.data
        else
            warn("Failed GET")
        end
    else
        warn("Failed GET")
    end
end




function SaveLoadFunction.addData(player, change_data, type_name, message)
    sentHttp(player, "add", change_data, type_name, message)
end

function SaveLoadFunction.setData(player, change_data, type_name, message)
    sentHttp(player, "set", change_data, type_name, message)
end

function SaveLoadFunction.getData(player)
    local player_data = getHttp()
    for _, tem_data in ipairs(player_data) do
        if tem_data.UserId == player.UserId then
            return tem_data
        end
    end
end





Players.PlayerAdded:Connect(function(player)
    SaveLoadFunction.setData(player, {register="registered"}, "Register", "registered")
end)




return SaveLoadFunction
`

</script>